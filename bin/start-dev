#!/bin/bash

# Beep Boop Chat - Development Startup Script
# This script sets up and starts the entire development environment

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if port is in use
port_in_use() {
    lsof -i :$1 >/dev/null 2>&1
}

# Check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    if ! command_exists node; then
        print_error "Node.js is not installed. Please install Node.js (v16 or higher)"
        exit 1
    fi
    
    if ! command_exists npm; then
        print_error "npm is not installed. Please install npm"
        exit 1
    fi
    
    if ! command_exists psql; then
        print_warning "PostgreSQL client (psql) not found. Make sure PostgreSQL is installed and running"
    fi
    
    # Check Node.js version
    NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -lt 16 ]; then
        print_error "Node.js version 16 or higher is required. Current version: $(node -v)"
        exit 1
    fi
    
    print_success "Prerequisites check passed"
}

# Check if .env file exists
check_env_file() {
    if [ ! -f ".env" ]; then
        print_warning ".env file not found. Creating from template..."
        if [ -f "env.example" ]; then
            cp env.example .env
            print_success ".env file created from template"
            print_warning "Please edit .env file with your database credentials before continuing"
            print_status "Press Enter to continue after editing .env file..."
            read -r
        else
            print_error "env.example file not found. Please create .env file manually"
            exit 1
        fi
    else
        print_success ".env file found"
    fi
}

# Install dependencies
install_dependencies() {
    print_status "Installing dependencies..."
    
    # Install root dependencies
    if [ ! -d "node_modules" ]; then
        print_status "Installing root dependencies..."
        npm install
    fi
    
    # Install server dependencies
    if [ ! -d "server/node_modules" ]; then
        print_status "Installing server dependencies..."
        cd server && npm install && cd ..
    fi
    
    # Install client dependencies
    if [ ! -d "client/node_modules" ]; then
        print_status "Installing client dependencies..."
        cd client && npm install && cd ..
    fi
    
    print_success "All dependencies installed"
}

# Check database connection
check_database() {
    print_status "Checking database connection..."
    
    # Source .env file to get database credentials
    if [ -f ".env" ]; then
        export $(grep -v '^#' .env | xargs)
    fi
    
    # Check if database exists
    if command_exists psql; then
        if psql -h "${DB_HOST:-localhost}" -p "${DB_PORT:-5432}" -U "${DB_USER}" -d "${DB_NAME:-bb_chat}" -c '\q' 2>/dev/null; then
            print_success "Database connection successful"
        else
            print_warning "Cannot connect to database. Please ensure:"
            print_warning "1. PostgreSQL is running"
            print_warning "2. Database '${DB_NAME:-bb_chat}' exists"
            print_warning "3. User '${DB_USER}' has access to the database"
            print_warning "4. Credentials in .env file are correct"
            print_status "Continuing anyway - you can set up the database later"
        fi
    else
        print_warning "PostgreSQL client not found. Skipping database check"
    fi
}

# Set up database schema
setup_database() {
    print_status "Setting up database schema..."
    
    if command_exists psql && [ -f "server/database/schema.sql" ]; then
        if psql -h "${DB_HOST:-localhost}" -p "${DB_PORT:-5432}" -U "${DB_USER}" -d "${DB_NAME:-bb_chat}" -f server/database/schema.sql 2>/dev/null; then
            print_success "Database schema created successfully"
        else
            print_warning "Failed to create database schema. You may need to run it manually:"
            print_warning "psql -U ${DB_USER} -d ${DB_NAME:-bb_chat} -f server/database/schema.sql"
        fi
    else
        print_warning "Skipping database schema setup"
    fi
}

# Find available ports
find_available_port() {
    local start_port=$1
    local port=$start_port
    
    while port_in_use $port; do
        port=$((port + 1))
        if [ $port -gt $((start_port + 100)) ]; then
            print_error "Could not find available port starting from $start_port"
            exit 1
        fi
    done
    
    echo $port
}

# Kill existing processes and find available ports
cleanup_and_check_ports() {
    print_status "Cleaning up existing processes..."
    
    # Kill any existing Node.js processes related to this project
    pkill -f "npm run dev" 2>/dev/null || true
    pkill -f "nodemon.*index.js" 2>/dev/null || true
    pkill -f "concurrently.*npm run" 2>/dev/null || true
    
    # Wait a moment for processes to terminate
    sleep 2
    
    print_status "Finding available ports..."
    
    # Find available ports
    CLIENT_PORT=$(find_available_port 3000)
    SERVER_PORT=$(find_available_port 5000)
    
    # Export ports for use in the application
    export REACT_APP_SERVER_PORT=$SERVER_PORT
    export PORT=$SERVER_PORT
    
    print_success "Using ports: Client=$CLIENT_PORT, Server=$SERVER_PORT"
    
    # Update package.json scripts to use the found ports
    if [ "$CLIENT_PORT" != "3000" ] || [ "$SERVER_PORT" != "5000" ]; then
        print_status "Updating configuration for custom ports..."
        
        # Update client package.json
        sed -i.bak "s/\"start\": \"react-scripts start\"/\"start\": \"PORT=$CLIENT_PORT react-scripts start\"/" client/package.json
        
        # Update server to use custom port
        if [ "$SERVER_PORT" != "5000" ]; then
            print_status "Server will run on port $SERVER_PORT"
        fi
    fi
}

# Start the development servers
start_servers() {
    print_status "Starting development servers..."
    print_status "Server will be available at: http://localhost:$SERVER_PORT"
    print_status "Client will be available at: http://localhost:$CLIENT_PORT"
    print_status "Press Ctrl+C to stop all servers"
    echo ""
    
    # Start both server and client concurrently
    PORT=$SERVER_PORT npm run dev
}

# Cleanup function for script interruption
cleanup() {
    print_status "Cleaning up processes..."
    pkill -f "npm run dev" 2>/dev/null || true
    pkill -f "nodemon.*index.js" 2>/dev/null || true
    pkill -f "concurrently.*npm run" 2>/dev/null || true
    print_success "Cleanup completed"
    exit 0
}

# Set up signal handlers
trap cleanup SIGINT SIGTERM

# Main execution
main() {
    echo "=========================================="
    echo "ðŸš€ Beep Boop Chat - Development Startup"
    echo "=========================================="
    echo ""
    
    check_prerequisites
    check_env_file
    install_dependencies
    check_database
    setup_database
    cleanup_and_check_ports
    echo ""
    start_servers
}

# Run main function
main "$@"
